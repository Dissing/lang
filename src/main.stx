import cstd;
import intmap;
import strmap;
import source_map;
import error;
import interning;
import session;
import tokens;
import lexer;
import ast;
import parser;
import resolution;
import typecheck;
import codegen;

extern basename :: (path: *char) -> *char
extern dirname :: (path: *char) -> *char

add_module :: (sess: *Session, target: *CompileTarget, path: Path, parent: *Module) -> *Module;

find_module :: (sess: *Session, target: *CompileTarget, path: Path, parent: *Module) -> *Module {

  i: i32 = 0;
  while i < target.num_modules {
    module: *Module = target.modules[i];
    if module.path.segments[0].name.x == path.segments[0].name.x  return module;
    i = i + 1;
  }

  return add_module(sess, target, path, parent);
}

path_to_str :: (interner: *Interner, path: Path) -> *char {
  buffer: *char = malloc(255);
  i: i32 = 0;
  offset: u64 = 0;
  while i < path.num_segments {
    seg: *char = get_str(interner, path.segments[i].name);
    seg_len: u64 = strlen(seg);
    memcpy(&buffer[offset], seg, seg_len);
    buffer[offset + seg_len] = '/';
    offset = offset + seg_len + 1;
    i = i + 1;
  }
  buffer[offset - 1] = 0;
  return buffer;
}

search_module :: (sess: *Session, module_path: Path) -> *char {

  module_part: *char = path_to_str(&sess.interner, module_path);

  path: *char = malloc(255);
  sprintf(path, "%s/%s.stx", sess.root_path, module_part);
  if !access(path, 0)  return path;

  i: i32 = 0;
  while i < sess.num_search_paths {
    sprintf(path, "%s/%s.stx", sess.search_paths[i], module_part);
    if !access(path, 0)  return path;
  }

  abort();
}

add_module :: (sess: *Session, target: *CompileTarget, path: Path, parent: *Module) -> *Module {

  file_path: *char = search_module(sess, path);

  source: *SourceFile = source_map_new_file(&sess.source, file_path);
  module: *Module = parse(sess, source, path.segments[0].name, parent);

  target.modules[target.num_modules] = module;
  target.num_modules = target.num_modules + 1;

  i: i32 = 0;
  while i < module.num_items {
    item: *Item = &module.items[i];
    if item.kind == ItemKind::Import {
      binding: Binding;
      binding.kind = BindingKind::Module;
      binding.node.module = find_module(sess, target, item.node._import, parent);
      item.node._import.binding = binding;
    }
    i = i + 1;
  }

  resolve_names(sess, module);
  check(sess, module);

  return module;
}

strip_ext :: (filename: *char) {
  end: u32 = strlen(filename);

  while end > 0 && filename[end] != '.'  end = end - 1;

  if end != 0  filename[end] = 0;
}

main :: (argc: i32, argv: **char) -> i32 {
  if argc < 3 {
    printf("Usage: styxc INPUT OUTPUT [SEARCHPATHS]\n");
    abort();
  }

  sess: Session;

  sess.num_search_paths = argc - 3;
  sess.search_paths = malloc(8 * sess.num_search_paths);
  i: i32 = 0;
  while i < sess.num_search_paths {
    sess.search_paths[i] = argv[i + 3];
    i = i + 1;
  }

  sess.interner = interner_create();
  sess.source = source_map_create();
  root_filename: *char = basename(argv[1]);
  sess.root_path = dirname(argv[1]);


  strip_ext(root_filename);

  target: CompileTarget;
  target.modules = malloc(8 * 64);
  target.num_modules = 0;

  root_path: Path;
  root_path.segments = malloc(sizeof(Ident));
  root_path.segments[0].name = intern(&sess.interner, root_filename);
  root_path.num_segments = 1;

  add_module(&sess, &target, root_path, null);

  generate(&sess, &target, argv[2]);

  return 0;
}
