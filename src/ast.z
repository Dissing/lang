
struct Type {}
struct Expr {}
struct Block {}

struct NodeId {
  owner: u32,
  local: u32,
}

struct Ident {
  name: Sid,
}

enum ResKind {
  Definition,
}

union ResNode {
  def: NodeId,
}

struct Res {
  kind: ResKind,
  node: ResNode,
}

struct Path {
  segments: *Ident,
  num_segments: u32,
  res: Res,
}

struct Mod {
  span: Span,
  items: *NodeId,
  num_items: u32,
}

enum TypeKind {
  Unit,
  Ptr,
  Path,
}


union TypeKindNode {
  path: Sid,
  ptr: *Type,
}

struct Type {
  id: NodeId,
  kind: TypeKind,
  node: TypeKindNode,
}

enum LiteralKind {
  Int,
  Float,
  Bool,
  Char,
  Str,
}

union LiteralValue {
  floating: f64,
  integer: u64,
  boolean: bool,
  ch: char,
  str: Sid,
}

struct Literal {
  kind: LiteralKind,
  value: LiteralValue,
}


enum UnaryOperatorKind {
  // "*" operator for dereferencing pointers
  Deref,
  // "&" operator for taking the address of a place
  Refer,
  // "-" operator for numerical negation
  Negation,
  // "!" for logical not
  Complement,
}

enum BinaryOperatorKind {
  Invalid, //Temporary until we get option types
  //Aritmetic operators
  Addition,
  Subtraction,
  Product,
  Division,
  Modulus,

  //Comperative operators
  Less,
  LessEq,
  Greater,
  GreaterEq,
  Equality,
  NotEq,

  //Bitwise operators
  BAnd,
  BOr,
  Xor,
  LeftShift,
  RightShift,

  //Logical operators
  And,
  Or,
}

struct BinaryData {
  op: BinaryOperatorKind,
  left: *Expr,
  right: *Expr,
}

struct CallData {
  func: *Expr,
  args: **Expr,
  num_args: u32,
}

struct ConditionalData {
  condition: *Expr,
  then: *Expr,
  otherwise: *Expr,
}

struct WhileData {
  condition: *Expr,
  body: *Expr,
}

struct IndexingData {
  array: *Expr,
  index: *Expr,
}

struct FieldData {
  strct: *Expr,
  ident: Ident,
}

struct UnaryData {
  op: UnaryOperatorKind,
  inner: *Expr,
}

enum ExprKind {
  Binary,
  Block,
  Call,
  Conditional,
  Field,
  Indexing,
  Path,
  Literal,
  Unary,
  While,
}

union ExprKindNode {
  binary: BinaryData,
  block: *Block,
  call: CallData,
  conditional: ConditionalData,
  field: FieldData,
  indexing: IndexingData,
  path: Path,
  lit: Literal,
  unary: UnaryData,
  whl: WhileData,
}

struct Expr {
  id: NodeId,
  span: Span,
  kind: ExprKind,
  node: ExprKindNode,
}

struct AssignmentData {
  left: *Expr,
  right: *Expr,
}

enum StmtKind {
  Assignment,
  Item,
  Expr,
  Return,
  Break,
  Continue,
  Defer,
  Empty,
}

union StmtKindNode {
  assignment: AssignmentData,
  item: NodeId,
  expr: *Expr,
  _return: *Expr,
  _defer: *Expr,
}

struct Stmt {
  kind: StmtKind,
  node: StmtKindNode,
  span: Span,
}

struct Block {
  stmts: **Stmt,
  num_stmts: u32,
  id: NodeId,
  span: Span,
}

struct Body {
  value: *Expr,
}

enum VisibilityKind {
  Public,
  Private,
}

struct Visibility {
  kind: VisibilityKind,
}

struct CompoundField {
  ident: Ident,
  id: NodeId,
  ty: *Type,
}

struct CompoundData {
  fields: *CompoundField,
  num_fields: u32,
}

struct EnumVariant {
  ident: Ident,
  id: NodeId,
}

struct EnumData {
  variants: *EnumVariant,
  num_variants: u32,
}

struct FunctionParameter {
  ident: Ident,
  id: NodeId,
  ty: *Type,
}


struct FunctionHeader {
  parameters: *FunctionParameter,
  num_parameters: u32,
  output: *Type,
}

struct FunctionData {
  header: FunctionHeader,
  body: NodeId,
}

struct VariableData {
  ty: *Type,
  mutable: bool,
  body: NodeId,
}

enum ItemKind {
  Const,
  Enum,
  Function,
  Mod,
  Struct,
  Union,
  Variable,
}

union ItemKindNode {
  compound: CompoundData,
  _enum: EnumData,
  variable: VariableData,
  function: FunctionData,
  module: Mod,
}

struct Item {
  ident: Ident,
  id: NodeId,
  kind: ItemKind,
  node: ItemKindNode,
  vis: Visibility,
  span: Span,
}

struct CompilationUnit {
  body_map: *IntMap,
  bodies: *Body,
  num_bodies: u32,

  item_map: *IntMap,
  items: *Item,
  num_items: u32,

  module: Mod,
}

fn unit_create_body(unit: *CompilationUnit, owner_item: NodeId, id: *NodeId) -> *Body {

  val idx: u32 = unit.num_bodies;
  var body: *Body = &unit.bodies[idx];
  unit.num_bodies = unit.num_bodies + 1;

  val owner: u64 = owner_item.owner;
  val local: u64 = 1;
  val key: u64 = (owner << 32) | local;
  intmap_insert(unit.body_map, key, idx);

  id.owner = owner;
  id.local = local;

  return body;
}

fn unit_get_body(unit: *CompilationUnit, id: NodeId) -> Body {
  val owner: u64 = id.owner;
  val key: u64 = (owner << 32) | (id.local);
  val idx: u32 = intmap_lookup(unit.body_map, key);
  return unit.bodies[idx];
}

fn unit_create_item(unit: *CompilationUnit, id: *NodeId) -> *Item {

  val idx: u32 = unit.num_items;
  var item: *Item = &unit.items[idx];
  unit.num_items = unit.num_items + 1;

  val owner: u64 = idx;
  val local: u64 = 0;
  val key: u64 = (owner << 32) | local;
  intmap_insert(unit.item_map, key, idx);

  id.owner = owner;
  id.local = local;
  item.id = *id;

  return item;
}

fn unit_get_item(unit: *CompilationUnit, id: NodeId) -> *Item {
  val owner: u64 = id.owner;
  val key: u64 = (owner << 32) | (id.local);
  val idx: u32 = intmap_lookup(unit.item_map, key);
  return &unit.items[idx];
}
