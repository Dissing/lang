import cstd;
import intmap;
import interning;
import source_map;
import error;
import ast;
import session;

SymbolInfoKind :: enum {
  Local,
  Parameter,
  Generic,
}

SymbolInfoNode :: union {
  local: *LocalData,
  parameter: *FunctionParameter,
  generic: *GenericParam,
}

SymbolInfo :: struct {
  ident: Ident,
  kind: SymbolInfoKind,
  node: SymbolInfoNode,
}

Scope :: struct {
  symbols: *SymbolInfo,
  num_symbols: u32,
}

PrimitiveTypeSids :: struct {
  _void: Sid,
  _constvoid: Sid,
  _bool: Sid,
  _char: Sid,
  _constchar: Sid,
  _i8: Sid,
  _i16: Sid,
  _i32: Sid,
  _i64: Sid,
  _u8: Sid,
  _u16: Sid,
  _u32: Sid,
  _u64: Sid,
  _f32: Sid,
  _f64: Sid,
}

IndexEntry :: struct {
  path: Path,
}

ResolutionContext :: struct {
  scope_stack: *Scope,
  stack_top: u32,
  source_map: *SourceMap,
  interner: *Interner,
  root_module: *Module,
  primitive_ty_sids: PrimitiveTypeSids,
  index_lookup: *IntMap,
  index: *IndexEntry,
  num_indices: u32,
}

setup_primitive_ty_sids :: (i: *Interner, p: *PrimitiveTypeSids) {
  p._void = intern(i, "void");
  p._constvoid = intern(i, "constvoid");
  p._bool = intern(i, "bool");
  p._char = intern(i, "char");
  p._constchar = intern(i, "constchar");
  p._i8 = intern(i, "i8");
  p._i16 = intern(i, "i16");
  p._i32 = intern(i, "i32");
  p._i64 = intern(i, "i64");
  p._u8 = intern(i, "u8");
  p._u16 = intern(i, "u16");
  p._u32 = intern(i, "u32");
  p._u64 = intern(i, "u64");
  p._f32 = intern(i, "f32");
  p._f64 = intern(i, "f64");
}

push_block :: (ctx: *ResolutionContext) {
  ctx.stack_top = ctx.stack_top + 1;
  scope: *Scope = &ctx.scope_stack[ctx.stack_top];

  scope.symbols = malloc(sizeof(SymbolInfo)*32);
  scope.num_symbols = 0;
}

pop_block :: (ctx: *ResolutionContext) {
  scope: *Scope = &ctx.scope_stack[ctx.stack_top];
  free(scope.symbols);
  ctx.stack_top = ctx.stack_top - 1;
}

push_parameter :: (ctx: *ResolutionContext, ident: Ident, data: *FunctionParameter) {
  scope: *Scope = &ctx.scope_stack[ctx.stack_top];
  s: *SymbolInfo = &scope.symbols[scope.num_symbols];
  s.ident = ident;
  s.kind = SymbolInfoKind::Parameter;
  s.node.parameter = data;
  scope.num_symbols = scope.num_symbols + 1;
}


push_generic :: (ctx: *ResolutionContext, ident: Ident, data: *GenericParam) {
  scope: *Scope = &ctx.scope_stack[ctx.stack_top];
  s: *SymbolInfo = &scope.symbols[scope.num_symbols];
  s.ident = ident;
  s.kind = SymbolInfoKind::Generic;
  s.node.generic = data;
  scope.num_symbols = scope.num_symbols + 1;
}

push_local :: (ctx: *ResolutionContext, ident: Ident, data: *LocalData) {
  scope: *Scope = &ctx.scope_stack[ctx.stack_top];
  s: *SymbolInfo = &scope.symbols[scope.num_symbols];
  s.ident = ident;
  s.kind = SymbolInfoKind::Local;
  s.node.local = data;
  scope.num_symbols = scope.num_symbols + 1;
}

lookup :: (ctx: *ResolutionContext, ident: Ident) -> Path {
  i: i32 = ctx.stack_top;
  while i > 0 {
    scope: *Scope = &ctx.scope_stack[i];
    j: i32 = scope.num_symbols - 1;
    while j >= 0 {
      symbol: SymbolInfo = scope.symbols[j];
      if symbol.ident.name.x == ident.name.x {
          path: Path;
          path.segments = malloc(sizeof(Ident));
          path.segments[0] = symbol.ident;
          path.num_segments = 1;
          if symbol.kind == SymbolInfoKind::Local {
            path.binding.kind = BindingKind::Local;
            path.binding.node.local = symbol.node.local;
          }
          else if symbol.kind == SymbolInfoKind::Parameter {
            path.binding.kind = BindingKind::Parameter;
            path.binding.node.parameter = symbol.node.parameter;
          }
          else if symbol.kind == SymbolInfoKind::Generic {
            path.binding.kind = BindingKind::Generic;
            path.binding.node.generic = symbol.node.generic;
          }
          else  abort();
          return path;
      }
      j = j - 1;
    }
    i = i - 1;
  }

  idx: u32 = intmap_lookup(ctx.index_lookup, ident.name.x)
  if idx > 0 {
    entry: IndexEntry = ctx.index[idx];
    return entry.path;
  }

  emit_error(ctx.source_map, ident.span, "Unable to resolve item");
  abort();
}

add_item :: (ctx: *ResolutionContext, parent: *Module, item: *Item) {

  idx_entry: *IndexEntry = &ctx.index[ctx.num_indices];


  idx_entry.path.num_segments = parent.path.num_segments + 1;
  idx_entry.path.segments = malloc(sizeof(Ident) * idx_entry.path.num_segments);
  memcpy(idx_entry.path.segments, parent.path.segments, sizeof(Ident) * parent.path.num_segments);
  idx_entry.path.segments[parent.path.num_segments] = item.ident;
  idx_entry.path.binding.kind = BindingKind::Item;
  idx_entry.path.binding.node.item = item;

  intmap_insert(ctx.index_lookup, item.ident.name.x, ctx.num_indices);

  ctx.num_indices = ctx.num_indices + 1;
}


import_wildcard :: (ctx: *ResolutionContext, path: Path) {

  module: *Module = path.binding.node.module;

  i: u32 = 0;
  while i < module.num_items {
    item: *Item = &module.items[i];
    if item.kind != ItemKind::Import  add_item(ctx, module, item);
    i = i + 1;
  }
}

index_module :: (ctx: *ResolutionContext, module: *Module) {

  i: u32 = 0;
  while i < module.num_items {
    item: *Item = &module.items[i];

    if item.kind == ItemKind::Import  import_wildcard(ctx, item.node._import);
    else  add_item(ctx, module, item);
    i = i + 1;
  }
}

check_if_sid_is_primitive :: (ctx: *ResolutionContext, s: Sid, prim: *PrimitiveTy) -> bool {

  p: *PrimitiveTypeSids = &ctx.primitive_ty_sids;
  if s.x == p._void.x  prim.kind = PrimitiveTyKind::Void;
  else if s.x == p._constvoid.x  prim.kind = PrimitiveTyKind::ConstVoid;
  else if s.x == p._bool.x  prim.kind = PrimitiveTyKind::Bool;
  else if s.x == p._char.x  prim.kind = PrimitiveTyKind::Char;
  else if s.x == p._constchar.x  prim.kind = PrimitiveTyKind::ConstChar;

  else if s.x == p._i8.x { prim.kind = PrimitiveTyKind::Signed; prim.node.integer = IntegerSize::I8; }
  else if s.x == p._i16.x { prim.kind = PrimitiveTyKind::Signed; prim.node.integer = IntegerSize::I16; }
  else if s.x == p._i32.x { prim.kind = PrimitiveTyKind::Signed; prim.node.integer = IntegerSize::I32; }
  else if s.x == p._i64.x { prim.kind = PrimitiveTyKind::Signed; prim.node.integer = IntegerSize::I64; }

  else if s.x == p._u8.x { prim.kind = PrimitiveTyKind::Unsigned; prim.node.integer = IntegerSize::I8; }
  else if s.x == p._u16.x { prim.kind = PrimitiveTyKind::Unsigned; prim.node.integer = IntegerSize::I16; }
  else if s.x == p._u32.x { prim.kind = PrimitiveTyKind::Unsigned; prim.node.integer = IntegerSize::I32; }
  else if s.x == p._u64.x { prim.kind = PrimitiveTyKind::Unsigned; prim.node.integer = IntegerSize::I64; }

  else if s.x == p._f32.x { prim.kind = PrimitiveTyKind::Floating; prim.node.floating = FloatingSize::F32; }
  else if s.x == p._f64.x { prim.kind = PrimitiveTyKind::Floating; prim.node.floating = FloatingSize::F64; }

  else  return false;

  return true;
}

resolve_path :: (ctx: *ResolutionContext, path: *Path) {
  prim: PrimitiveTy;

  if check_if_sid_is_primitive(ctx, path.segments[0].name, &prim) {
    path.binding.kind = BindingKind::PrimitiveType;
    path.binding.node.primitive = prim;
  }
  else if path.num_segments > 1  {
    base_path: Path = lookup(ctx, path.segments[0]);
    if base_path.binding.kind == BindingKind::Item {
      item: *Item = base_path.binding.node.item;

      if item.kind == ItemKind::Enum {

        p: Path;
        p.num_segments = base_path.num_segments + 1;
        p.segments = malloc(sizeof(Ident) * p.num_segments);
        memcpy(p.segments, base_path.segments, base_path.num_segments * sizeof(Ident));


        i: u32 = 0;
        data: EnumData = item.node._enum;
        found: bool = false;
        while i < data.num_variants {
          if data.variants[i].ident.name.x == path.segments[1].name.x {
            p.segments[base_path.num_segments] = data.variants[i].ident;
            p.binding.kind = BindingKind::Variant;
            p.binding.node.variant = &data.variants[i];
            found = true;
            break;
          }
          i = i + 1;
        }
        if !found  emit_error(ctx.source_map, path.span, "Enum does not have requested variant");
        ;
        *path = p;
      }
      else abort(); //TODO
    }
    else  abort();
  }
  else if path.num_segments == 1 {
    *path = lookup(ctx, path.segments[0]);
  }
}

resolve_type :: (ctx: *ResolutionContext, ty: *AstType) {
  if ty.kind == AstTypeKind::Ptr {
    resolve_type(ctx, ty.node.ptr);
  }
  else if ty.kind == AstTypeKind::Path {
    resolve_path(ctx, &ty.node.path);
  }
}

resolve_expr :: (ctx: *ResolutionContext, expr: *Expr)

resolve_unary :: (ctx: *ResolutionContext, unary: UnaryData) {
  resolve_expr(ctx, unary.inner);
}

resolve_binary :: (ctx: *ResolutionContext, binary: BinaryData) {
  resolve_expr(ctx, binary.left);
  resolve_expr(ctx, binary.right);
}

resolve_call :: (ctx: *ResolutionContext, call: CallData) {
  resolve_expr(ctx, call.func);

  i: u32 = 0;
  while i < call.num_args {
    resolve_expr(ctx, call.args[i]);
    i = i + 1;
  }
}

resolve_conditional :: (ctx: *ResolutionContext, cond: ConditionalData) {
  resolve_expr(ctx, cond.condition);
  resolve_expr(ctx, cond.then);
  if (cond.otherwise) {
    resolve_expr(ctx, cond.otherwise);
  }
}

resolve_match :: (ctx: *ResolutionContext, data: MatchData) {
  resolve_expr(ctx, data.condition);
  i: u32 = 0;
  while i < data.num_arms {
    resolve_expr(ctx, data.arms[i].body);
    i = i + 1;
  }
}

resolve_while :: (ctx: *ResolutionContext, data: WhileData) {
  resolve_expr(ctx, data.condition);
  resolve_expr(ctx, data.body);
}

resolve_indexing :: (ctx: *ResolutionContext, idx: IndexingData) {
  resolve_expr(ctx, idx.array);
  resolve_expr(ctx, idx.index);
}

resolve_field :: (ctx: *ResolutionContext, field: FieldData) {
  resolve_expr(ctx, field.strct);
}

resolve_assignment :: (ctx: *ResolutionContext, assignment: AssignmentData) {
  resolve_expr(ctx, assignment.left);
  resolve_expr(ctx, assignment.right);
}

resolve_block :: (ctx: *ResolutionContext, block: *Block) {

  push_block(ctx);
  i: u32 = 0;
  while i < block.num_exprs {
    resolve_expr(ctx, block.exprs[i]);
    i = i + 1;
  }
  pop_block(ctx);
}

resolve_local :: (ctx: *ResolutionContext, data: *LocalData) {
  push_local(ctx, data.pat.path.segments[0], data);
  resolve_type(ctx, data.ast_ty);
  if data.value  resolve_expr(ctx, data.value);
}

resolve_sizeof :: (ctx: *ResolutionContext, expr: *Expr) {
  resolve_expr(ctx, expr);
}

resolve_cast :: (ctx: *ResolutionContext, data: *CastData) {
  resolve_expr(ctx, data.inner);
  resolve_type(ctx, data.ast_ty);
}

resolve_expr :: (ctx: *ResolutionContext, expr: *Expr) {
  if expr.kind == ExprKind::Unary  resolve_unary(ctx, expr.node.unary);
  else if expr.kind == ExprKind::Binary  resolve_binary(ctx, expr.node.binary);
  else if expr.kind == ExprKind::Block  resolve_block(ctx, expr.node.block);
  else if expr.kind == ExprKind::Call  resolve_call(ctx, expr.node.call);
  else if expr.kind == ExprKind::Conditional  resolve_conditional(ctx, expr.node.conditional);
  else if expr.kind == ExprKind::Match  resolve_match(ctx, expr.node._match);
  else if expr.kind == ExprKind::While  resolve_while(ctx, expr.node.whl);
  else if expr.kind == ExprKind::Indexing  resolve_indexing(ctx, expr.node.indexing);
  else if expr.kind == ExprKind::Field  resolve_field(ctx, expr.node.field);
  else if expr.kind == ExprKind::Path  resolve_path(ctx, &expr.node.path);
  else if expr.kind == ExprKind::Assignment  resolve_assignment(ctx, expr.node.assignment);
  else if expr.kind == ExprKind::Local  resolve_local(ctx, &expr.node.local);
  else if expr.kind == ExprKind::Return  resolve_expr(ctx, expr.node._return);
  else if expr.kind == ExprKind::Literal {}
  else if expr.kind == ExprKind::ControlFlow  {}
  else if expr.kind == ExprKind::Sizeof  resolve_sizeof(ctx, expr.node._sizeof);
  else if expr.kind == ExprKind::Cast  resolve_cast(ctx, &expr.node._cast);
  else abort();
}

resolve_function :: (ctx: *ResolutionContext, item: *Item) {
  func: FunctionData = item.node.function;

  resolve_type(ctx, func.header.output_ast_ty);
  i: u32 = 0;
  while i < func.header.num_parameters {
    param: *FunctionParameter = &func.header.parameters[i];
    resolve_type(ctx, param.ast_ty);
    i = i + 1;
  }

  if func.body {
    push_block(ctx);
    i: u32 = 0;
    while i < func.header.num_parameters {
      param: *FunctionParameter = &func.header.parameters[i];
      push_parameter(ctx, param.pat.path.segments[0], param);

      i = i + 1;
    }

    resolve_expr(ctx, item.node.function.body);
    pop_block(ctx);
  }
}

resolve_variable :: (ctx: *ResolutionContext, item: *Item) {
  resolve_type(ctx, item.node.variable.ast_ty);
  push_block(ctx);
  if item.node.variable.body {
    resolve_expr(ctx, item.node.variable.body);
  }
  pop_block(ctx);
}


resolve_enum :: (ctx: *ResolutionContext, item: *Item, parent_path: Path) {

  data: *EnumData = &item.node._enum;

  data.path.num_segments = parent_path.num_segments + 1;
  data.path.segments = malloc(sizeof(Ident) * data.path.num_segments);
  data.path.binding.kind = BindingKind::Item;
  data.path.binding.node.item = item;
  memcpy(data.path.segments, parent_path.segments, sizeof(Ident) * parent_path.num_segments);
  data.path.segments[parent_path.num_segments] = item.ident;


  i: u32 = 0;
  while i < data.num_variants {
    variant: *EnumVariant = &data.variants[i];

    if variant.kind == VariantKind::Tuple {
      j: u32 = 0;
      while j < variant.data.num_elements {
        resolve_type(ctx, variant.data.elements[j].ast_ty);
        j = j + 1;
      }
    }
    i = i + 1;
  }
}

resolve_compound :: (ctx: *ResolutionContext, item: *Item, parent_path: Path) {

  data: *CompoundData = &item.node.compound;

  data.path.num_segments = parent_path.num_segments + 1;
  data.path.segments = malloc(sizeof(Ident) * data.path.num_segments);
  data.path.binding.kind = BindingKind::Item;
  data.path.binding.node.item = item;
  memcpy(data.path.segments, parent_path.segments, sizeof(Ident) * parent_path.num_segments);
  data.path.segments[parent_path.num_segments] = item.ident;

  push_block(ctx);

  i: u32 = 0;
  while i < data.generics.num_parameters {
    generic: *GenericParam = &data.generics.parameters[i];
    push_generic(ctx, generic.ident, generic);
    i = i + 1;
  }

  i = 0;
  while i <  data.num_fields {
    resolve_type(ctx, data.fields[i].ast_ty);
    i = i + 1;
  }

  pop_block(ctx);
}

resolve_item :: (ctx: *ResolutionContext, item: *Item, parent_path: Path) {
  if item.kind == ItemKind::Const || item.kind == ItemKind::Variable  resolve_variable(ctx, item);
  if item.kind == ItemKind::Function  resolve_function(ctx, item);
  if item.kind == ItemKind::Struct || item.kind == ItemKind::Union  resolve_compound(ctx, item, parent_path);
  if item.kind == ItemKind::Enum  resolve_enum(ctx, item, parent_path);
}

resolve_module :: (ctx: *ResolutionContext, module: *Module) {

  i: u32 = 0;
  while i < module.num_items {
    resolve_item(ctx, &module.items[i], module.path);
    i = i + 1;
  }
}

resolve_names :: (sess: *Session, module: *Module) {
  ctx: ResolutionContext;

  ctx.interner = &sess.interner;
  setup_primitive_ty_sids(ctx.interner, &ctx.primitive_ty_sids);
  ctx.scope_stack = malloc(sizeof(Scope) * 128);
  ctx.stack_top = 0;
  ctx.source_map = &sess.source;
  ctx.index_lookup = intmap_create(2048);
  ctx.index = malloc(sizeof(IndexEntry) * 2048);
  ctx.num_indices = 1;


  index_module(&ctx, module);
  resolve_module(&ctx, module);
}
