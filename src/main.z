
mod cstd;
mod intmap;
mod strmap;
mod source_map;
mod error;
mod interning;
mod session;
mod tokens;
mod lexer;
mod ast;
mod parser;
mod resolution;
mod typecheck;
mod codegen;

use self::cstd::*;
use self::session::Session;
use self::interning::interner_create;
use self::source_map::source_map_create;
use self::ast::Ast;
use self::parser::parse;
use self::resolution::resolve;
use self::typecheck::check;
use self::codegen::generate;

extern basename :: (path: *char) -> *char
extern dirname :: (path: *char) -> *char

main :: (argc: i32, argv: **char) -> i32 {
  if argc != 3 {
    printf("Usage: compiler INPUT OUTPUT\n");
    abort();
  }

  var sess: Session;


  sess.interner = interner_create();
  sess.source = source_map_create();
  var root_filename: *char = basename(argv[1]);
  sess.root_path = dirname(argv[1]);

  strtok(root_filename, ".z");
  val ast: Ast = parse(&sess, root_filename);

  resolve(&sess, &ast);
  check(&sess, &ast);
  generate(&sess, ast, argv[2]);

  return 0;
}
