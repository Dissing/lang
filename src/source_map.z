use super::cstd::*;

Span :: struct {
  from: u32,
  to: u32,
}

SourceFile :: struct {
  name: *char,
  content: *char,
  length: u32,
  start: u32,
  end: u32,
  lines: *u32,
  num_lines: u32,
}

SourceMap :: struct {
  files: *SourceFile,
  num_files: u32,
  file_starts: *u32,
}

source_map_create :: () -> SourceMap {
  map: SourceMap;
  map.files = calloc(sizeof(SourceFile), 64);
  map.num_files = 0;
  map.file_starts = calloc(sizeof(u32), 64);

  return map;
}

load_file_content :: (file: *SourceFile) {
  fp: *FILE = fopen(file.name, "rb");
  fseek(fp, 0, SEEK_END);
  file.length = ftell(fp);
  rewind(fp);
  file.content = malloc(file.length);
  fread(file.content, 1, file.length, fp);
  fclose(fp);
}

source_map_new_file :: (self: *SourceMap, path: *char, filename: *char) -> *SourceFile {
  file: *SourceFile = &self.files[self.num_files];
  self.num_files = self.num_files + 1;

  needed_length: u32 = strlen(path) + strlen(filename) + 4;

  name_buffer: *char = malloc(needed_length);

  sprintf(name_buffer, "%s/%s.z", path, filename);

  file.name = name_buffer;
  file.lines = calloc(sizeof(u32), 4096);
  file.num_lines = 1;

  if self.num_files > 1  file.start = self.files[self.num_files - 2].end;
  else  file.start = 0;

  self.file_starts[self.num_files - 1] = file.start;

  load_file_content(file);

  return file;
}

source_file_newline :: (self: *SourceFile, position: u32) {
  self.lines[self.num_lines] = self.start + position;
  self.num_lines = self.num_lines + 1;
}

source_file_done :: (self: *SourceFile, length: u32) {
  self.end = self.start + length;
}

source_map_info :: (m: *SourceMap, span: Span, first: *u32, last: *u32) -> *SourceFile {
  i: u32 = 0;
  file: *SourceFile = 0;
  while i < m.num_files {
    if m.file_starts[i] > span.from  break;
    file = &m.files[i];
    i = i + 1;
  }

  if !file  abort();

  i = 0;
  while i < file.num_lines {
    if file.lines[i] <= span.from {
      *first = i;
    }
    else  break;
    i = i + 1;
  }
  i = i - 1;
  while i < file.num_lines {
    if file.lines[i] <= span.to {
      *last = i;
    }
    else  break;
    i = i + 1;
  }

  return file;
}

emit_line_directive :: (fp: *FILE, m: *SourceMap, span: Span) {
  line_first: u32;
  line_end: u32;

  file: *SourceFile = source_map_info(m, span, &line_first, &line_end);

  fprintf(fp, "#line %u \"%s\"\n", line_first + 1, file.name);
}

source_snippet :: (m: *SourceMap, span: Span) {

  line_first: u32;
  line_last: u32;

  file: *SourceFile = source_map_info(m, span, &line_first, &line_last);

  printf("%s:%u\n", file.name, line_first + 1);

  buffer: *char = malloc(1024);
  i: u32 = line_first;
  while i <= line_last {
    line_start: u32 = file.lines[i];
    line_end: u32 = file.lines[i + 1];
    length: u32 = line_end - line_start;
    memcpy(buffer, &file.content[line_start + 1 - file.start], length);
    buffer[length+1] = 0;
    printf("%s\n", buffer);
    i = i + 1;
  }

}
