
use super::cstd::*;
use super::intmap::*;
use super::interning::*;
use super::source_map::*;
use super::error::*;
use super::tokens::*;
use super::lexer::*;
use super::ast::*;

ParsingContext :: struct {
  current_token: u64,
  tokens: *Token,
  num_tokens: u64,
  source_map: *SourceMap,
  sess: *Session,
  current_module: *Module,
  ast: *Ast,
}

is_done_parsing :: (ctx: *ParsingContext) -> bool {
  return ctx.num_tokens == ctx.current_token;
}

accept :: (ctx: *ParsingContext, token: TokenKind) -> bool {
  tok : Token = ctx.tokens[ctx.current_token];
  if !is_done_parsing(ctx) && tok.kind == token {
    ctx.current_token = ctx.current_token + 1;
    return true;
  }
  return false;
}

can_accept :: (ctx: *ParsingContext, token: TokenKind) -> bool {
  tok : Token = ctx.tokens[ctx.current_token];
  if !is_done_parsing(ctx) && tok.kind == token {
    return true;
  }
  return false;
}

look_ahead :: (ctx: *ParsingContext, offset: u64) -> Token {
  if ctx.current_token == ctx.num_tokens {
    eof_tok: Token;
    eof_tok.kind = EOF;
    return eof_tok;
  } else  return ctx.tokens[ctx.current_token + offset];
}

consume :: (ctx: *ParsingContext) -> Token {
  ctx.current_token = ctx.current_token + 1;
  return ctx.tokens[ctx.current_token - 1];
}

expect :: (ctx: *ParsingContext, kind: TokenKind) -> Token {
  tok: Token = consume(ctx);
  if tok.kind == kind {
    return tok;
  } else {
    emit_error(ctx.source_map, tok.span, "Expect failed!");
    abort();
  }
}

span_start :: (ctx: *ParsingContext) -> u32 {
  return ctx.tokens[ctx.current_token].span.from;
}

span_end :: (ctx: *ParsingContext) -> u32 {
  return ctx.tokens[ctx.current_token - 1].span.to;
}

parse_identifier :: (ctx: *ParsingContext) -> Ident {

  ident: Ident;
  ident.span.from = span_start(ctx);
  tok: Token = consume(ctx);

  if tok.kind != TokenKind::Identifier  emit_error(ctx.source_map, tok.span, "Invalid identifier");

  ident.name = tok.lexeme;
  ident.span.to = span_end(ctx);

  return ident;
}

parse_path :: (ctx: *ParsingContext) -> Path {
  path: Path;
  path.segments = malloc(sizeof(Ident) * 6);
  path.num_segments = 0;
  path.span.from = span_start(ctx);

  while true {
    if accept(ctx, TokenKind::Star) {
      path.segments[path.num_segments].name.x = 0;
    } else {
      path.segments[path.num_segments] = parse_identifier(ctx);
    }
    path.num_segments = path.num_segments + 1;
    if !accept(ctx, TokenKind::ColonColon)  break;
  }

  path.span.to = span_end(ctx);
  return path;
}

parse_path_expr :: (ctx: *ParsingContext) -> *Expr {
  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Path);
  expr.node.path = parse_path(ctx);
  return expr;
}

parse_pattern :: (ctx: *ParsingContext) -> Pattern {
  pat: Pattern;
  pat.span.from = span_start(ctx);
  pat.ident = parse_identifier(ctx);
  pat.span.to = span_start(ctx);
  return pat;
}

parse_type :: (ctx: *ParsingContext) -> *AstType {
  node: AstTypeKindNode;
  kind: AstTypeKind;

  token: Token = look_ahead(ctx, 0);
  if token.kind == TokenKind::Identifier {
    kind = AstTypeKind::Path;
    node.path = parse_path(ctx);
  } else if token.kind == TokenKind::Star {
    expect(ctx, TokenKind::Star);
    kind = AstTypeKind::Ptr;
    node.ptr = parse_type(ctx);
  } else if token.kind == TokenKind::Ellipsis {
    expect(ctx, TokenKind::Ellipsis);
    kind = AstTypeKind::Variadic;
  }
  else  emit_error(ctx.source_map, token.span, "Expected type");

  type: *AstType = malloc(sizeof(AstType));
  type.kind = kind;
  type.node = node;

  return type;
}

convert_token_to_binary_operator :: (tok: TokenKind) -> BinaryOperatorKind {
  if tok == TokenKind::Plus  return BinaryOperatorKind::Addition;
  else if tok == TokenKind::Minus  return BinaryOperatorKind::Subtraction;
  else if tok == TokenKind::Star  return BinaryOperatorKind::Product;
  else if tok == TokenKind::Slash  return BinaryOperatorKind::Division;
  else if tok == TokenKind::Percent  return BinaryOperatorKind::Modulus;
  else if tok == TokenKind::Less  return BinaryOperatorKind::Less;
  else if tok == TokenKind::LessEqual  return BinaryOperatorKind::LessEq;
  else if tok == TokenKind::Greater  return BinaryOperatorKind::Greater;
  else if tok == TokenKind::GreaterEqual  return BinaryOperatorKind::GreaterEq;
  else if tok == TokenKind::EqualEqual  return BinaryOperatorKind::Equality;
  else if tok == TokenKind::BangEqual  return BinaryOperatorKind::NotEq;
  else if tok == TokenKind::AndAnd  return BinaryOperatorKind::And;
  else if tok == TokenKind::OrOr  return BinaryOperatorKind::Or;
  else if tok == TokenKind::And  return BinaryOperatorKind::BAnd;
  else if tok == TokenKind::Or  return BinaryOperatorKind::BOr;
  else if tok == TokenKind::Hat  return BinaryOperatorKind::Xor;
  else if tok == TokenKind::LessLess  return BinaryOperatorKind::LeftShift;
  else if tok == TokenKind::GreaterGreater  return BinaryOperatorKind::RightShift;
  else  return BinaryOperatorKind::Invalid;
}

get_binary_operator_precedence :: (op: BinaryOperatorKind) -> u32 {
  if op == BinaryOperatorKind::Product  return 10;
  else if op == BinaryOperatorKind::Division  return 10;
  else if op == BinaryOperatorKind::Modulus  return 10;
  else if op == BinaryOperatorKind::Addition  return 9;
  else if op == BinaryOperatorKind::Subtraction  return 9;
  else if op == BinaryOperatorKind::LeftShift  return 8;
  else if op == BinaryOperatorKind::RightShift  return 8;
  else if op == BinaryOperatorKind::BAnd  return 7;
  else if op == BinaryOperatorKind::Xor  return 6;
  else if op == BinaryOperatorKind::BOr  return 5;
  else if op == BinaryOperatorKind::Less  return 4;
  else if op == BinaryOperatorKind::LessEq  return 4;
  else if op == BinaryOperatorKind::Greater  return 4;
  else if op == BinaryOperatorKind::GreaterEq  return 4;
  else if op == BinaryOperatorKind::Equality  return 4;
  else if op == BinaryOperatorKind::NotEq  return 4;
  else if op == BinaryOperatorKind::And  return 3;
  else if op == BinaryOperatorKind::Or  return 2;
  else return 0;
}

get_current_precedence :: (ctx: *ParsingContext) -> u32 {

  if ctx.num_tokens <= ctx.current_token {
    return 0;
  } else {
    tok : Token = ctx.tokens[ctx.current_token];
    op_precedence: u32 = get_binary_operator_precedence(convert_token_to_binary_operator(tok.kind));
    if op_precedence > 0  return op_precedence;
    else if tok.kind == TokenKind::Dot  return 13;
    else if (tok.kind == TokenKind::LeftBracket || tok.kind == TokenKind::LeftParen)  return 12;
    else if tok.kind == TokenKind::Equal  return 1;
    else  return 0;
  }
}

parse_expression :: (ctx: *ParsingContext, precedence: u32) -> *Expr

parse_integer_literal :: (ctx: *ParsingContext) -> *Expr {

  tok: Token = expect(ctx, TokenKind::Integer);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Literal);
  expr.node.lit.kind = LiteralKind::Int;

  sess: *Session = ctx.sess;
  expr.node.lit.value.integer = atol(get_str(&sess.interner, tok.lexeme));
  return expr;
}

parse_float_literal :: (ctx: *ParsingContext) -> *Expr {

  tok: Token = expect(ctx, TokenKind::Float);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Literal);
  expr.node.lit.kind = LiteralKind::Float;

  sess: *Session = ctx.sess;
  expr.node.lit.value.floating = atof(get_str(&sess.interner, tok.lexeme));
  return expr;
}

parse_char_literal :: (ctx: *ParsingContext) -> *Expr {

  tok: Token = expect(ctx, TokenKind::Char);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Literal);
  expr.node.lit.kind = LiteralKind::Char;

  sess: *Session = ctx.sess;
  s: *char = get_str(&sess.interner, tok.lexeme);

  len: u32 = strlen(s);
  if len == 2 && s[0] == '\\' {
    c: char;
    if s[1] == 'n'  c = '\n';
    else if s[1] == 't'  c = '\t';
    else if s[1] == 'r'  c = '\r';
    else if s[1] == '\\'  c = '\\';
    else if s[1] == '\''  c = '\'';
    else  emit_error(ctx.source_map, tok.span, "Unknown escape sequence");
    expr.node.lit.value.ch = c;
  } else if len == 1 {
    expr.node.lit.value.ch = s[0];
  }
  else  emit_error(ctx.source_map, tok.span, "Invalid char literal");

  return expr;
}

parse_string_literal :: (ctx: *ParsingContext) -> *Expr {

  tok: Token = expect(ctx, TokenKind::String);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Literal);
  expr.node.lit.kind = LiteralKind::Str;

  expr.node.lit.value.str = tok.lexeme;
  return expr;
}

parse_bool_literal :: (ctx: *ParsingContext) -> *Expr {

  tok: Token = consume(ctx);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Literal);
  expr.node.lit.kind = LiteralKind::Bool;
  expr.node.lit.value.boolean = tok.kind == TokenKind::True;
  return expr;
}

parse_call :: (ctx: *ParsingContext, left: *Expr) -> *Expr {

  result: *Expr = ast_create_expr(ctx.ast, ExprKind::Call);
  result.node.call.func = left;
  result.node.call.args = malloc(8 * 16);
  result.node.call.num_args = 0;

  if !accept(ctx, TokenKind::RightParen) {
    while true {
      expr: *Expr = parse_expression(ctx, 0);
      result.node.call.args[result.node.call.num_args] = expr;
      result.node.call.num_args = result.node.call.num_args + 1;
      if !accept(ctx, TokenKind::Comma)  break;
    }
    expect(ctx, TokenKind::RightParen);
  }

  return result;

}

parse_prefix_operator :: (ctx: *ParsingContext) -> *Expr {
  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Unary);

  tok: Token = consume(ctx);

  if tok.kind == TokenKind::Minus  expr.node.unary.op = UnaryOperatorKind::Negation;
  else if tok.kind == TokenKind::Bang  expr.node.unary.op = UnaryOperatorKind::Complement;
  else if tok.kind == TokenKind::And  expr.node.unary.op = UnaryOperatorKind::Refer;
  else if tok.kind == TokenKind::Star  expr.node.unary.op = UnaryOperatorKind::Deref;
  else  emit_error(ctx.source_map, tok.span, "Invalid prefix operator");

  expr.node.unary.inner = parse_expression(ctx, 11);

  return expr;
}

parse_binary_operator :: (ctx: *ParsingContext, left: *Expr, operator: BinaryOperatorKind) -> *Expr {
  precedence: u32 = get_binary_operator_precedence(operator);
  right: *Expr = parse_expression(ctx, precedence);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Binary);
  expr.node.binary.op = operator;
  expr.node.binary.left = left;
  expr.node.binary.right = right;

  return expr;
}

parse_field_access :: (ctx: *ParsingContext, left: *Expr) -> *Expr {
  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Field);
  expr.node.field.ident = parse_identifier(ctx);
  expr.node.field.strct = left;

  return expr;
}

parse_indexing :: (ctx: *ParsingContext, left: *Expr) -> *Expr {

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Indexing);
  expr.node.indexing.index = parse_expression(ctx, 0);
  expr.node.indexing.array = left;

  expect(ctx, TokenKind::RightBracket);

  return expr;
}

parse_assignment :: (ctx: *ParsingContext, left: *Expr) -> *Expr {
  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Assignment);
  expr.node.assignment.left = left;
  expr.node.assignment.right = parse_expression(ctx, 0);

  return expr;
}

parse_infix_operator :: (ctx: *ParsingContext, left: *Expr, tok: Token) -> *Expr {

  if tok.kind == TokenKind::LeftParen  return parse_call(ctx, left);
  if tok.kind == TokenKind::Dot  return parse_field_access(ctx, left);
  if tok.kind == TokenKind::LeftBracket  return parse_indexing(ctx, left);
  if tok.kind == TokenKind::Equal  return parse_assignment(ctx, left);

  op: BinaryOperatorKind = convert_token_to_binary_operator(tok.kind);
  if op != BinaryOperatorKind::Invalid {
    return parse_binary_operator(ctx, left, op);
  }
  else  emit_error(ctx.source_map, tok.span, "Unsupported infix operator");
  return null;
}

parse_stmt :: (ctx: *ParsingContext) -> *Expr;

parse_block :: (ctx: *ParsingContext) -> *Block {

  block : *Block = malloc(sizeof(Block));
  block.exprs = malloc(8 * 128);
  block.num_exprs = 0;
  block.span.from = span_start(ctx);

  next : Token = look_ahead(ctx, 0);
  if next.kind == TokenKind::LeftCurly {
    expect(ctx, TokenKind::LeftCurly);
    i: u32 = 0;
    while !accept(ctx, TokenKind::RightCurly) {
      block.exprs[i] = parse_stmt(ctx);
      block.num_exprs = block.num_exprs + 1;
      i = i + 1;
    }
  } else {
    block.exprs[0] = parse_stmt(ctx);
    block.num_exprs = 1;
  }
  block.span.to = span_end(ctx);

  return block;
}

parse_block_expr :: (ctx: *ParsingContext) -> *Expr {
  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Block);
  expr.node.block = parse_block(ctx);
  return expr;
}

parse_if :: (ctx: *ParsingContext) -> *Expr {

  expect(ctx, TokenKind::If);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Conditional);
  expr.node.conditional.condition = parse_expression(ctx, 0);
  expr.node.conditional.then = parse_block_expr(ctx);

  if accept(ctx, TokenKind::Else) {
    expr.node.conditional.otherwise = parse_block_expr(ctx);
  } else {
    expr.node.conditional.otherwise = null;
  }

  return expr;
}

parse_while :: (ctx: *ParsingContext) -> *Expr {
  expect(ctx, TokenKind::While);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::While);
  expr.node.whl.condition = parse_expression(ctx, 0);
  expr.node.whl.body = parse_block_expr(ctx);

  return expr;
}

parse_sizeof :: (ctx: *ParsingContext) -> *Expr {
  expect(ctx, TokenKind::Sizeof);
  expect(ctx, TokenKind::LeftParen);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Sizeof);
  expr.node._sizeof = parse_expression(ctx, 0);
  expect(ctx, TokenKind::RightParen);

  return expr;
}

parse_local_variable :: (ctx: *ParsingContext) -> *Expr {

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Local);
  expr.node.local.pat = parse_pattern(ctx);
  expect(ctx, TokenKind::Colon);

  expr.node.local.ast_ty = parse_type(ctx);

  if accept(ctx, TokenKind::Equal)  expr.node.local.value = parse_expression(ctx, 0);
  else  expr.node.local.value = 0;

  return expr;
}


parse_control_flow :: (ctx: *ParsingContext) -> *Expr {
  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::ControlFlow);
  expr.node.control_flow_is_continue = accept(ctx, TokenKind::Continue);

  if !expr.node.control_flow_is_continue  expect(ctx, TokenKind::Break);

  return expr;
}

parse_cast :: (ctx: *ParsingContext) -> *Expr {
  expect(ctx, TokenKind::Cast);
  expect(ctx, TokenKind::LeftParen);

  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Cast);
  expr.node._cast.inner = parse_expression(ctx, 0);
  expect(ctx, TokenKind::Comma);
  expr.node._cast.ast_ty = parse_type(ctx);
  expect(ctx, TokenKind::RightParen);

  return expr;
}

parse_return :: (ctx: *ParsingContext) -> *Expr {
  expect(ctx, TokenKind::Return);
  expr: *Expr = ast_create_expr(ctx.ast, ExprKind::Return);
  expr.node._return = parse_expression(ctx, 0);

  return expr;
}

parse_expression :: (ctx: *ParsingContext, precedence: u32) -> *Expr {
  tok: Token = look_ahead(ctx, 0);
  span: Span;
  span.from = span_start(ctx);

  left : *Expr;

  if tok.kind == TokenKind::Integer  left = parse_integer_literal(ctx);
  else if tok.kind == TokenKind::Char  left = parse_char_literal(ctx);
  else if tok.kind == TokenKind::String  left = parse_string_literal(ctx);
  else if tok.kind == TokenKind::Float  left = parse_float_literal(ctx);
  else if (tok.kind == TokenKind::False || tok.kind == TokenKind::True)  left = parse_bool_literal(ctx);
  else if (tok.kind == TokenKind::Minus || tok.kind == TokenKind::Bang ||
           tok.kind == TokenKind::And || tok.kind == TokenKind::Star) left = parse_prefix_operator(ctx);
  else if tok.kind == TokenKind::If  left = parse_if(ctx);
  else if tok.kind == TokenKind::Cast  left = parse_cast(ctx);
  else if tok.kind == TokenKind::Sizeof  left = parse_sizeof(ctx);
  else if tok.kind == TokenKind::Identifier  left = parse_path_expr(ctx);
  else if tok.kind == TokenKind::LeftParen {
    expect(ctx, TokenKind::LeftParen);
    left = parse_expression(ctx, 0);
    expect(ctx, TokenKind::RightParen);
  }
  else if tok.kind == TokenKind::LeftCurly  left = parse_block_expr(ctx);
  else  emit_error(ctx.source_map, tok.span, "Invalid expression prefix");

  while precedence < get_current_precedence(ctx) {
    next_tok : Token = consume(ctx);
    left = parse_infix_operator(ctx, left, next_tok);
  }
  span.to = span_end(ctx);
  left.span = span;

  return left;
}

parse_stmt :: (ctx: *ParsingContext) -> *Expr {

  tok: Token = look_ahead(ctx, 0);
  next: Token = look_ahead(ctx, 1);
  span: Span;
  span.from = span_start(ctx);

  stmt: *Expr;

  if tok.kind == TokenKind::While  stmt = parse_while(ctx);
  else if tok.kind == TokenKind::Continue || tok.kind == TokenKind::Break  stmt = parse_control_flow(ctx);
  else if tok.kind == TokenKind::Return  stmt = parse_return(ctx);
  else if next.kind == TokenKind::Colon  stmt = parse_local_variable(ctx);
  else stmt = parse_expression(ctx, 0);

  span.to = span_end(ctx);
  stmt.span = span;

  accept(ctx, TokenKind::Semicolon);

  return stmt;
}

parse_generics :: (ctx: *ParsingContext) -> Generics {
  expect(ctx, TokenKind::Less);
  generics: Generics;
  generics.parameters = malloc(4 * sizeof(GenericParam));
  generics.num_parameters = 0;

  while !accept(ctx, TokenKind::Greater) {
    generics.parameters[generics.num_parameters].ident = parse_identifier(ctx);

    accept(ctx, TokenKind::Comma);
    generics.num_parameters = generics.num_parameters + 1;
  }
  return generics;
}

parse_variable_decl :: (ctx: *ParsingContext, item: *Item) {

  if accept(ctx, TokenKind::Val)  item.kind = ItemKind::Const;
  else if accept(ctx, TokenKind::Var)  item.kind = ItemKind::Variable;

  item.ident = parse_identifier(ctx);
  if accept(ctx, TokenKind::ColonColon)  item.kind = ItemKind::Const;
  else if accept(ctx, TokenKind::Colon)  item.kind = ItemKind::Variable;
  item.node.variable.ast_ty = parse_type(ctx);

  if accept(ctx, TokenKind::Equal)  item.node.variable.body = parse_expression(ctx, 0);
  else  item.node.variable.body = 0;
}

parse_compound_decl :: (ctx: *ParsingContext, item: *Item) {

  item.ident = parse_identifier(ctx);

  expect(ctx, TokenKind::ColonColon);
  if accept(ctx, TokenKind::Struct)  item.kind = ItemKind::Struct;
  else if accept(ctx, TokenKind::Union)  item.kind = ItemKind::Union;
  else  abort();

  if can_accept(ctx, TokenKind::Less)  item.node.compound.generics = parse_generics(ctx);
  else  item.node.compound.generics.num_parameters = 0;

  expect(ctx, TokenKind::LeftCurly);

  item.node.compound.fields = malloc(sizeof(CompoundField) * 32);
  item.node.compound.num_fields = 0;

  while !accept(ctx, TokenKind::RightCurly) {
    token: Token = consume(ctx);
    if token.kind != TokenKind::Identifier  emit_error(ctx.source_map, token.span, "Expected field identifier");

    item.node.compound.fields[item.node.compound.num_fields].ident.name = token.lexeme;
    expect(ctx, TokenKind::Colon);

    type: *AstType = parse_type(ctx);
    item.node.compound.fields[item.node.compound.num_fields].ast_ty = type;
    item.node.compound.num_fields = item.node.compound.num_fields + 1;
    expect(ctx, TokenKind::Comma);
  }
}


parse_enum_decl :: (ctx: *ParsingContext, item: *Item) {

  item.kind = ItemKind::Enum;
  item.ident = parse_identifier(ctx);

  expect(ctx, TokenKind::ColonColon);
  expect(ctx, TokenKind::Enum);

  expect(ctx, TokenKind::LeftCurly);

  item.node._enum.variants = malloc(sizeof(EnumVariant) * 128);
  item.node._enum.num_variants = 0;

  while !accept(ctx, TokenKind::RightCurly) {
    item.node._enum.variants[item.node._enum.num_variants].ident = parse_identifier(ctx);
    item.node._enum.variants[item.node._enum.num_variants]._enum = item;
    item.node._enum.num_variants = item.node._enum.num_variants + 1;
    expect(ctx, TokenKind::Comma);
  }
}

parse_function_header :: (ctx: *ParsingContext) -> FunctionHeader {
  header: FunctionHeader;

  header.parameters = malloc(sizeof(FunctionParameter) * 16);
  header.num_parameters = 0;

  if can_accept(ctx, TokenKind::Less)  header.generics = parse_generics(ctx);
  else  header.generics.num_parameters = 0;

  expect(ctx, TokenKind::LeftParen);

  while !accept(ctx, TokenKind::RightParen) {

    header.parameters[header.num_parameters].pat = parse_pattern(ctx);

    expect(ctx, TokenKind::Colon);
    type: *AstType = parse_type(ctx);
    header.parameters[header.num_parameters].ast_ty = type;
    header.num_parameters = header.num_parameters + 1;

    accept(ctx, TokenKind::Comma);
  }

  if accept(ctx, TokenKind::Arrow)  header.output_ast_ty = parse_type(ctx);
  else {
    //TODO Cleanup when proper field access has been implemented
    output: *AstType = malloc(sizeof(AstType));
    output.kind = AstTypeKind::Void;
    header.output_ast_ty = output;
  }

  return header;
}

parse_function_decl :: (ctx: *ParsingContext, item: *Item) {

  item.kind = ItemKind::Function;

  item.ident = parse_identifier(ctx);

  expect(ctx, TokenKind::ColonColon);

  sess: *Session = ctx.sess;
  if item.ident.name.x == intern(&sess.interner, "main").x  item.should_mangle = false;

  item.node.function.header = parse_function_header(ctx);

  if look_ahead(ctx, 0).kind == TokenKind::LeftCurly  item.node.function.body = parse_expression(ctx, 0);
  else  item.node.function.body = 0;
}

parse_use :: (ctx: *ParsingContext, item: *Item) {
  expect(ctx, TokenKind::Use);

  item.kind = ItemKind::Use;
  item.node._use = parse_path(ctx);
  item.ident.name.x = 0

  accept(ctx, TokenKind::Semicolon);
}

parse_mod_inner :: (ctx: *ParsingContext, name: Ident) -> *Module
parse_mod_external :: (sess: *Session, ast: *Ast, path: *char, parent: *Module) -> *Module

parse_mod :: (ctx: *ParsingContext, item: *Item) {
  expect(ctx, TokenKind::Mod);

  item.ident = parse_identifier(ctx);
  item.kind = ItemKind::Module;

  if accept(ctx, TokenKind::LeftCurly)  item.node.module = parse_mod_inner(ctx, item.ident);
  else {
    sess: *Session = ctx.sess;
    path: *char = get_str(&sess.interner, item.ident.name);
    item.node.module = parse_mod_external(ctx.sess, ctx.ast, path, ctx.current_module);
  }
}


parse_item :: (ctx: *ParsingContext) -> *Item {

  item: *Item = ast_create_item(ctx.ast);
  item.span.from = span_start(ctx);
  item.should_mangle = !accept(ctx, TokenKind::Extern);

  tok : Token = look_ahead(ctx, 0);

  if tok.kind == TokenKind::Var  || tok.kind == TokenKind::Val  parse_variable_decl(ctx, item);
  else if tok.kind == TokenKind::Use  parse_use(ctx, item);
  else if tok.kind == TokenKind::Mod  parse_mod(ctx, item);
  else if tok.kind == TokenKind::Identifier {
    next: Token = look_ahead(ctx, 2);
    if next.kind == TokenKind::Struct || next.kind == TokenKind::Union  parse_compound_decl(ctx, item);
    else if next.kind == TokenKind::Enum  parse_enum_decl(ctx, item);
    else if next.kind == TokenKind::LeftParen  parse_function_decl(ctx, item);
    else parse_variable_decl(ctx, item);
  }
  else  emit_error(ctx.source_map, tok.span, "Unexpected token on top-level");

  accept(ctx, TokenKind::Semicolon);

  item.span.to = span_end(ctx);
  return item;
}

parse_mod_inner :: (ctx: *ParsingContext, name: Ident) -> *Module {
  module: *Module = malloc(sizeof(Module));
  module.span.from = span_start(ctx);
  module.items = malloc(8 * 2048);
  module.num_items = 0;
  module.index_lookup = intmap_create(2048);
  module.index = malloc(sizeof(IndexEntry) * 2048);
  module.num_indices = 1;
  module.parent = ctx.current_module;

  parent: *Module = module.parent;

  if parent  module.path.num_segments = parent.path.num_segments + 1;
  else  module.path.num_segments = 1;

  module.path.segments = malloc(sizeof(Ident) * module.path.num_segments);
  if parent  memcpy(module.path.segments, parent.path.segments, parent.path.num_segments * sizeof(Ident));
  module.path.segments[module.path.num_segments - 1] = name;

  ctx.current_module = module;

  while !accept(ctx, TokenKind::RightCurly) && !is_done_parsing(ctx) {
    module.items[module.num_items] = parse_item(ctx);
    module.num_items = module.num_items + 1;
  }

  module.span.to = span_end(ctx);

  ctx.current_module = module.parent;

  return module;
}

parse_mod_external :: (sess: *Session, ast: *Ast, path: *char, parent: *Module) -> *Module {

  source_file: *SourceFile = source_map_new_file(&sess.source, sess.root_path, path);

  num_tokens: u32;
  tokens: *Token = lex(sess, source_file, &num_tokens);

  ctx: ParsingContext;
  ctx.current_token = 0;
  ctx.tokens = tokens;
  ctx.num_tokens = num_tokens;
  ctx.source_map = &sess.source;
  ctx.sess = sess;
  ctx.ast = ast;
  ctx.current_module = parent;

  name_ident: Ident;
  name_ident.name = intern(&sess.interner, path);
  name_ident.span.from = 0;
  name_ident.span.to = 0;

  module: *Module = parse_mod_inner(&ctx, name_ident);

  return module;
}

create_root_module :: (sess: *Session, ast: *Ast, path: *char) -> *Module {

  module: *Module = malloc(sizeof(Module));
  module.items = malloc(8 * 2048);
  module.index_lookup = intmap_create(2048);
  module.index = malloc(sizeof(IndexEntry) * 2048);
  module.num_indices = 1;
  module.parent = null;
  module.path.num_segments = 0;

  main_item: *Item = ast_create_item(ast);
  main_item.kind = ItemKind::Module;
  main_item.ident.name = intern(&sess.interner, path);

  main_module: *Module = parse_mod_external(sess, ast, path, module);
  main_item.span.from = main_module.span.from;
  main_item.span.to = main_module.span.to;
  main_item.node.module = main_module;
  module.items[0] = main_item;
  module.num_items = 1;

  return module;
}

parse :: (sess: *Session, root_module_name: *char) -> Ast {

  ast: Ast;

  ast.items = malloc(sizeof(Item) * 2048);
  ast.num_items = 1; //Reserve zero idx for null item

  ast.root_module = create_root_module(sess, &ast, root_module_name);

  return ast;
}
