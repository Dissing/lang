
use super::cstd::*;
use super::intmap::*;
use super::interning::*;
use super::source_map::*;
use super::ast::*;
use super::error::*;
use super::session::*;

CommonTypes :: struct {
  _void: *Ty,
  _constvoid: *Ty,
  _variadic: *Ty,
  _bool: *Ty,
  _char: *Ty,
  _constchar: *Ty,
  _i8: *Ty,
  _i16: *Ty,
  _i32: *Ty,
  _i64: *Ty,
  _u8: *Ty,
  _u16: *Ty,
  _u32: *Ty,
  _u64: *Ty,
  _f32: *Ty,
  _f64: *Ty,
}

TypeContext :: struct {
  initialized: bool,
  interner: *Interner,
  source_map: *SourceMap,
  common: CommonTypes,
  types_lookup: *IntMap,
  types: *Ty,
  next_type_idx: u32,
}

hash_ty :: (ty: *Ty) -> u64;

hash_fn :: (ty: *Ty) -> u64 {

  def: FnDef = ty.node.function;
  h: u64 = hash_ty(def.output);

  i: u32 = 0;
  while i < def.num_parameters {
    h = h ^ (hash_ty(def.parameters[i]) + 2654435769 + (h << 6) + (h >> 2));
    i = i + 1;
  }
  return h;
}

hash_path :: (path: Path) -> u64 {
  h: u64 = path.num_segments;
  i: u32 = 0;
  while i < path.num_segments {
    h = (h << 8) | path.segments[i].name.x;
    i = i + 1;
  }
  return h;
}

hash_ty :: (ty: *Ty) -> u64 {

  h: u64;

  h = ty.kind;

  if ty.kind == TyKind::Signed || ty.kind == TyKind::Unsigned  h = h ^ (integer_size(ty.node.integer) << 4);
  else if ty.kind == TyKind::Floating  h = h ^ (floating_size(ty.node.floating) << 4);
  else if ty.kind == TyKind::Struct || ty.kind == TyKind::Union  h = h ^ (hash_path(ty.node.compound.path) << 4);
  else if ty.kind == TyKind::Enum  h = h ^ (hash_path(ty.node._enum.path) << 4);
  else if ty.kind == TyKind::Fn  h = h ^ (hash_fn(ty) << 4);
  else if ty.kind == TyKind::Ptr  h = h ^ (hash_ty(ty.node.ptr) << 4);

  return h;
}

intern_ty :: (ctx: *TypeContext, ty: Ty) -> *Ty {
  h: u64 = hash_ty(&ty);
  ty_idx: u32 = intmap_lookup(ctx.types_lookup, h);
  if ty_idx == 0 {
    ty_idx = ctx.next_type_idx;
    ctx.next_type_idx = ctx.next_type_idx + 1;
    intmap_insert(ctx.types_lookup, h, ty_idx);
    ctx.types[ty_idx] = ty;
  }
  return &ctx.types[ty_idx];
}

create_base_type :: (ctx: *TypeContext, kind: TyKind) -> *Ty {
  ty: Ty;
  ty.kind = kind;
  return intern_ty(ctx, ty);
}

create_float_type :: (ctx: *TypeContext, size: FloatingSize) -> *Ty {
  ty: Ty;
  ty.kind = TyKind::Floating;
  ty.node.floating = size;
  return intern_ty(ctx, ty);
}

create_int_type :: (ctx: *TypeContext, kind: TyKind, size: IntegerSize) -> *Ty {
  ty: Ty;
  ty.kind = kind;
  ty.node.integer = size;
  return intern_ty(ctx, ty);
}

create_common_types :: (ctx: *TypeContext) {
  t: *CommonTypes = &ctx.common;
  t._void = create_base_type(ctx, TyKind::Void);
  t._constvoid = create_base_type(ctx, TyKind::ConstVoid);
  t._variadic = create_base_type(ctx, TyKind::Variadic);
  t._bool = create_base_type(ctx, TyKind::Bool);
  t._char = create_base_type(ctx, TyKind::Char);
  t._constchar = create_base_type(ctx, TyKind::ConstChar);

  t._i8 = create_int_type(ctx, TyKind::Signed, IntegerSize::I8);
  t._i16 = create_int_type(ctx, TyKind::Signed, IntegerSize::I16);
  t._i32 = create_int_type(ctx, TyKind::Signed, IntegerSize::I32);
  t._i64 = create_int_type(ctx, TyKind::Signed, IntegerSize::I64);

  t._u8 = create_int_type(ctx, TyKind::Unsigned, IntegerSize::I8);
  t._u16 = create_int_type(ctx, TyKind::Unsigned, IntegerSize::I16);
  t._u32 = create_int_type(ctx, TyKind::Unsigned, IntegerSize::I32);
  t._u64 = create_int_type(ctx, TyKind::Unsigned, IntegerSize::I64);

  t._f32 = create_float_type(ctx, FloatingSize::F32);
  t._f64 = create_float_type(ctx, FloatingSize::F64);
}

ast_type_to_ty :: (ctx: *TypeContext, ast_ty: *AstType) -> *Ty;

primitive_to_ty :: (ctx: *TypeContext, prim: PrimitiveTy) -> *Ty {
  t: *CommonTypes = &ctx.common;
  if prim.kind == PrimitiveTyKind::Void  return t._void;
  else if prim.kind == PrimitiveTyKind::Bool  return t._bool;
  else if prim.kind == PrimitiveTyKind::Char  return t._char;

  else if prim.kind == PrimitiveTyKind::ConstChar  return t._constchar;
  else if prim.kind == PrimitiveTyKind::ConstVoid  return t._constvoid;

  else if prim.kind == PrimitiveTyKind::Signed {
    if prim.node.integer == IntegerSize::I8  return t._i8;
    else if prim.node.integer == IntegerSize::I16  return t._i16;
    else if prim.node.integer == IntegerSize::I32  return t._i32;
    else if prim.node.integer == IntegerSize::I64  return t._i64;
    else  abort();
  }
  else if prim.kind == PrimitiveTyKind::Unsigned {
    if prim.node.integer == IntegerSize::I8  return t._u8;
    else if prim.node.integer == IntegerSize::I16  return t._u16;
    else if prim.node.integer == IntegerSize::I32  return t._u32;
    else if prim.node.integer == IntegerSize::I64  return t._u64;
    else  abort();
  }
  else if prim.kind == PrimitiveTyKind::Floating {
    if prim.node.floating == FloatingSize::F32  return t._f32;
    else if prim.node.floating == FloatingSize::F64  return t._f64;
    else  abort();
  }
  else  abort();
}

ast_path_to_ty :: (ctx: *TypeContext, ast_ty: *AstType) -> *Ty {
  binding: Binding = ast_ty.node.path.binding;

  if binding.kind == BindingKind::PrimitiveType {
    return primitive_to_ty(ctx, binding.node.primitive);
  }
  else if binding.kind == BindingKind::Item {
    item: *Item = binding.node.item;
    if item.kind == ItemKind::Struct || item.kind == ItemKind::Union  return item.node.compound.ty;
    else if item.kind == ItemKind::Function  return item.node.function.header.ty;
    else if item.kind == ItemKind::Enum  return item.node._enum.ty;
    else  return null;
  }
  else abort(); //TODO
}

ast_ptr_to_ty :: (ctx: *TypeContext, ast_ty: *AstType) -> *Ty {
  ty: Ty;
  ty.kind = TyKind::Ptr;
  ty.node.ptr = ast_type_to_ty(ctx, ast_ty.node.ptr);
  return intern_ty(ctx, ty);
}

ast_type_to_ty :: (ctx: *TypeContext, ast_ty: *AstType) -> *Ty {
  if ast_ty.kind == AstTypeKind::Void  return ctx.common._void;
  else if ast_ty.kind == AstTypeKind::Path  return ast_path_to_ty(ctx, ast_ty);
  else if ast_ty.kind == AstTypeKind::Ptr  return ast_ptr_to_ty(ctx, ast_ty);
  else if ast_ty.kind == AstTypeKind::Variadic  return ctx.common._variadic;
  else abort();
}

ast_literal_to_ty :: (ctx: *TypeContext, lit: Literal) -> *Ty {
  if lit.kind == LiteralKind::Int  return ctx.common._i32;
  else if lit.kind == LiteralKind::Float  return ctx.common._f32;
  else if lit.kind == LiteralKind::Bool  return ctx.common._bool;
  else if lit.kind == LiteralKind::Char  return ctx.common._char;
  else if lit.kind == LiteralKind::Str {
    str_ty: Ty;
    str_ty.kind = TyKind::Ptr;
    str_ty.node.ptr = ctx.common._char;
    return intern_ty(ctx, str_ty);
  }
  else  abort();
}

coerce_type :: (ctx: *TypeContext, from: *Ty, to: *Ty) -> u32 {

  if from == to  return 1;
  else if to.kind == TyKind::Variadic  return 1;
  else if from.kind == TyKind::Signed || from.kind == TyKind::Unsigned {
    from_size: u32 = integer_size(from.node.integer);

    if to.kind == TyKind::Signed || to.kind == TyKind::Unsigned {
      to_size: u32 = integer_size(to.node.integer);
      if from_size <= to_size  return 2;
    }
    if to.kind == TyKind::Bool  return 2;

    if to.kind == TyKind::Ptr  return 2;
  }
  else if from.kind == TyKind::Ptr {
    inner_from: *Ty = from.node.ptr;

    if to.kind == TyKind::Bool  return 2;

    else if to.kind == TyKind::Ptr {
      inner_to: *Ty = to.node.ptr;
      if inner_from.kind == TyKind::Void || inner_from.kind == TyKind::ConstVoid  return 2;
      if inner_to.kind == TyKind::Void || inner_to.kind == TyKind::ConstVoid  return 2;

      if inner_from.kind == TyKind::Char && inner_to.kind == TyKind::ConstChar  return 2;
    }
  }
  return 0;
}

coerce_binary_expr :: (ctx: *TypeContext, expr: *Expr, left: *Ty, right: *Ty) {

  coerce_left: u32 = coerce_type(ctx, left, right);
  coerce_right: u32 = coerce_type(ctx, right, left);

  if coerce_left == 1 || coerce_right == 1 {}
  else if coerce_left == 2 {
    cast_expr: *Expr = create_expr(ExprKind::Cast);
    cast_expr.node._cast.ty = right;
    cast_expr.node._cast.inner = expr.node.binary.left;
    expr.node.binary.left = cast_expr;
  }
  else if coerce_right == 2 {
    cast_expr: *Expr = create_expr(ExprKind::Cast);
    cast_expr.node._cast.ty = left;
    cast_expr.node._cast.inner = expr.node.binary.right;
    expr.node.binary.right = cast_expr;
  }
  else  emit_error(ctx.source_map, expr.span, "Cannot coerce type in binary expression");
}

coerce_expr_type :: (ctx: *TypeContext, expr: *Expr, from: *Ty, to: *Ty) -> *Expr {
  can_coerce: u32 = coerce_type(ctx, from, to);
  if can_coerce == 1  return expr;
  else if can_coerce == 2 {
    cast_expr: *Expr = create_expr(ExprKind::Cast);
    cast_expr.node._cast.ty = to;
    cast_expr.node._cast.inner = expr;
    return cast_expr;
  }
  else emit_error(ctx.source_map, expr.span, "Cannot coerce type");
  abort();
}

check_expr :: (ctx: *TypeContext, expr: *Expr) -> *Ty;
check_item :: (ctx: *TypeContext, item: *Item);
check_mod :: (ctx: *TypeContext, module: *Module);

check_unary :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  inner_ty: *Ty = check_expr(ctx, expr.node.unary.inner);
  op: UnaryOperatorKind = expr.node.unary.op;
  if op == UnaryOperatorKind::Deref {
    if inner_ty.kind == TyKind::Ptr {
      return inner_ty.node.ptr;
    }
    else  emit_error(ctx.source_map, expr.span, "Trying to deref non-pointer");
  }
  else if op == UnaryOperatorKind::Refer {
    ptr_ty: Ty;
    ptr_ty.kind = TyKind::Ptr;
    ptr_ty.node.ptr = inner_ty;
    return intern_ty(ctx, ptr_ty);
  }
  else if op == UnaryOperatorKind::Negation {
    return inner_ty;
  }
  else if op == UnaryOperatorKind::Complement {
    expr.node.unary.inner = coerce_expr_type(ctx, expr.node.unary.inner, inner_ty, ctx.common._bool);
    return ctx.common._bool;
  }
  abort();
}

operator_is_boolean :: (op: BinaryOperatorKind) -> bool {
  return op == BinaryOperatorKind::Less || op == BinaryOperatorKind::LessEq || op == BinaryOperatorKind::NotEq ||
    op == BinaryOperatorKind::Greater || op == BinaryOperatorKind::GreaterEq || op == BinaryOperatorKind::Equality ||
    op == BinaryOperatorKind::And || op == BinaryOperatorKind::Or;
}

check_binary :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  op: BinaryOperatorKind = expr.node.binary.op;
  left: *Ty = check_expr(ctx, expr.node.binary.left);
  right: *Ty = check_expr(ctx, expr.node.binary.right);

  coerce_binary_expr(ctx, expr, left, right);

  if operator_is_boolean(op)  return ctx.common._bool;
  else  return left;
}

check_block :: (ctx: *TypeContext, block: *Block) {
  i: u32 = 0;
  while i < block.num_exprs {
    check_expr(ctx, block.exprs[i]);
    i = i + 1;
  }
}

check_block_expr :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  check_block(ctx, expr.node.block);
  return ctx.common._void;
}

check_call :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  call: CallData = expr.node.call;
  fn_ty: *Ty = check_expr(ctx, call.func);
  if fn_ty.kind != TyKind::Fn  emit_warning(ctx.source_map, expr.span, "Tried to call non-function");

  fn_def: *FnDef = &fn_ty.node.function;

  is_variadic: bool = false;
  if fn_def.num_parameters > 0 {
    param_ty: *Ty = fn_def.parameters[fn_def.num_parameters - 1];
    is_variadic = param_ty.kind == TyKind::Variadic;
  }

  if call.num_args == fn_def.num_parameters || (call.num_args >= (fn_def.num_parameters-1) && is_variadic)  {
    i: i32 = 0;
    while i < call.num_args {
        arg_ty: *Ty = check_expr(ctx, call.args[i]);
        if i < fn_def.num_parameters {
          call.args[i] = coerce_expr_type(ctx, call.args[i], arg_ty, fn_def.parameters[i]);
        }
        i = i + 1;
    }
  }
  else  emit_error(ctx.source_map, expr.span, "Called function with incorrect number of arguments");
  return fn_def.output;
}

check_conditional :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  data: *ConditionalData = &expr.node.conditional;

  cond_ty: *Ty = check_expr(ctx, data.condition);
  data.condition = coerce_expr_type(ctx, data.condition, cond_ty, ctx.common._bool);

  check_expr(ctx, data.then);
  if data.otherwise {
     check_expr(ctx, data.otherwise);
  }
  return ctx.common._void;
}

check_while :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  data: WhileData = expr.node.whl;
  condition: *Expr = data.condition;
  cond_ty: *Ty = check_expr(ctx, condition);
  if cond_ty.kind != TyKind::Bool  emit_warning(ctx.source_map, condition.span, "Condition must be of type bool");
  check_expr(ctx, data.body);
  return ctx.common._void;
}

check_indexing :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  data: IndexingData = expr.node.indexing;
  array_ty: *Ty = check_expr(ctx, data.array);
  if array_ty.kind != TyKind::Ptr   emit_error(ctx.source_map, expr.span, "Cannot index into non-ptr type");
  index_ty: *Ty = check_expr(ctx, data.index);
  if !(index_ty.kind == TyKind::Signed || index_ty.kind == TyKind::Unsigned) {
     emit_error(ctx.source_map, expr.span, "Only integers are valid indices");
  }
  return array_ty.node.ptr;
}

check_field :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  data: FieldData = expr.node.field;
  compound_ty: *Ty = check_expr(ctx, data.strct);

  ptr_inner: *Ty = compound_ty.node.ptr;
  if compound_ty.kind == TyKind::Ptr && (ptr_inner.kind == TyKind::Struct || ptr_inner.kind == TyKind::Union) {
    compound_ty = compound_ty.node.ptr;
  }

  if compound_ty.kind != TyKind::Struct && compound_ty.kind != TyKind::Union   emit_error(ctx.source_map, expr.span, "Cannot access field of non-compound type");

  compound: CompoundDef = compound_ty.node.compound;

  i: u32 = 0;
  while i < compound.num_fields {
    if compound.fields[i].name.x == data.ident.name.x {
      return compound.fields[i].ty;
    }
    i = i + 1;
  }
  emit_warning(ctx.source_map, expr.span, "Compound type has no such field");
  return null;
}

check_path :: (ctx: *TypeContext, path: *Path) -> *Ty {
  if path.binding.kind == BindingKind::Item {
    item: *Item = path.binding.node.item;
    if item.kind == ItemKind::Struct || item.kind == ItemKind::Union {
      return item.node.compound.ty;
    }
    else if item.kind == ItemKind::Enum {
      return item.node._enum.ty;
    }
    else if item.kind == ItemKind::Function {
      return item.node.function.header.ty;
    }
    else if item.kind == ItemKind::Const || item.kind == ItemKind::Variable {
      return item.node.variable.ty;
    }
    else  abort();
  }
  else if path.binding.kind == BindingKind::Local {
    data: *LocalData = path.binding.node.local;
    return data.ty;
  }
  else if path.binding.kind == BindingKind::Parameter {
    param: *FunctionParameter = path.binding.node.parameter;
    return param.ty;
  }
  else if path.binding.kind == BindingKind::Variant {
    variant: *EnumVariant = path.binding.node.variant;
    enum_item: *Item = variant._enum;
    return enum_item.node._enum.ty;
  }
  else if path.binding.kind == BindingKind::PrimitiveType {
    return primitive_to_ty(ctx, path.binding.node.primitive);
  }
  else abort();
}


check_local :: (ctx: *TypeContext, data: *LocalData) -> *Ty {
  data.ty = ast_type_to_ty(ctx, data.ast_ty);
  if data.value  check_expr(ctx, data.value);
  return ctx.common._void;
}

check_assignment :: (ctx: *TypeContext, assignment: AssignmentData) -> *Ty {
  check_expr(ctx, assignment.left);
  check_expr(ctx, assignment.right);
  return ctx.common._void;
}

check_return :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  check_expr(ctx, expr);
  return ctx.common._void;
}

check_sizeof :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  check_expr(ctx, expr);
  return ctx.common._u64;
}

check_cast :: (ctx: *TypeContext, data: *CastData) -> *Ty {
  check_expr(ctx, data.inner);
  data.ty = ast_type_to_ty(ctx, data.ast_ty);
  return data.ty;
}

check_expr :: (ctx: *TypeContext, expr: *Expr) -> *Ty {
  result: *Ty;
  if expr.kind == ExprKind::Unary  result = check_unary(ctx, expr);
  else if expr.kind == ExprKind::Binary  result = check_binary(ctx, expr);
  else if expr.kind == ExprKind::Block  result = check_block_expr(ctx, expr);
  else if expr.kind == ExprKind::Call  result = check_call(ctx, expr);
  else if expr.kind == ExprKind::Conditional  result = check_conditional(ctx, expr);
  else if expr.kind == ExprKind::ControlFlow  result = ctx.common._void;
  else if expr.kind == ExprKind::While  result = check_while(ctx, expr);
  else if expr.kind == ExprKind::Indexing  result = check_indexing(ctx, expr);
  else if expr.kind == ExprKind::Field  result = check_field(ctx, expr);
  else if expr.kind == ExprKind::Path  result = check_path(ctx, &expr.node.path);
  else if expr.kind == ExprKind::Literal  result = ast_literal_to_ty(ctx, expr.node.lit);
  else if expr.kind == ExprKind::Assignment  result = check_assignment(ctx, expr.node.assignment);
  else if expr.kind == ExprKind::Local  result = check_local(ctx, &expr.node.local);
  else if expr.kind == ExprKind::Return  result = check_return(ctx, expr.node._return);
  else if expr.kind == ExprKind::Sizeof  result = check_sizeof(ctx, expr.node._sizeof);
  else if expr.kind == ExprKind::Cast  result = check_cast(ctx, &expr.node._cast);
  else abort();
  expr.ty = result;
  return result;
}


check_variable :: (ctx: *TypeContext, item: *Item) {
  data: *VariableData = &item.node.variable;
  decl_ty: *Ty = data.ty;

  if item.node.variable.body {
    expr_ty: *Ty = check_expr(ctx, data.body);

    data.body = coerce_expr_type(ctx, data.body, expr_ty, decl_ty);
  }
}

check_function :: (ctx: *TypeContext, item: *Item) {

  if item.node.function.body {
    check_expr(ctx, item.node.function.body);
  }
}

check_item :: (ctx: *TypeContext, item: *Item) {
  if item.kind == ItemKind::Enum  {}
  else if item.kind == ItemKind::Struct || item.kind == ItemKind::Union  {}
  else if item.kind == ItemKind::Use  {}
  else if item.kind == ItemKind::Const || item.kind == ItemKind::Variable  check_variable(ctx, item);
  else if item.kind == ItemKind::Function  check_function(ctx, item);
  else abort();
}

check_mod :: (ctx: *TypeContext, module: *Module) {
  i: u32 = 0;
  while i < module.num_items {
    check_item(ctx, &module.items[i]);
    i = i + 1;
  }
}

collect_enum :: (ctx: *TypeContext, item: *Item) {

  ty: *Ty = item.node._enum.ty;
  def: *EnumDef = &ty.node._enum;

  def.variants = malloc(sizeof(Sid) * item.node._enum.num_variants);
  i: u32 = 0;
  while i < item.node._enum.num_variants {
    def.variants[i] = item.node._enum.variants[i].ident.name;
    i = i + 1;
  }
  def.num_variants = item.node._enum.num_variants;
}

collect_variable :: (ctx: *TypeContext, item: *Item) {
  data: *VariableData = &item.node.variable;
  data.ty = ast_type_to_ty(ctx, data.ast_ty);
}

collect_function :: (ctx: *TypeContext, item: *Item) {

  header: *FunctionHeader = &item.node.function.header;

  def: FnDef;

  def.output = ast_type_to_ty(ctx, header.output_ast_ty);
  def.num_parameters = header.num_parameters;
  def.parameters = malloc(8 * def.num_parameters);

  i: u32 = 0;
  while i < def.num_parameters {
    param_ty: *Ty = ast_type_to_ty(ctx, header.parameters[i].ast_ty);
    def.parameters[i] = param_ty;
    header.parameters[i].ty = param_ty;
    i = i + 1;
  }

  ty: Ty;
  ty.kind = TyKind::Fn;
  ty.node.function = def;

  item.node.function.header.ty = intern_ty(ctx, ty);
}

collect_compound :: (ctx: *TypeContext, item: *Item) {
  ty: *Ty = item.node.compound.ty;
  def: *CompoundDef = &ty.node.compound;

  if item.node.compound.num_fields > 0 {

    def.fields = malloc(sizeof(FieldDef) * item.node.compound.num_fields);
    i: u32 = 0;
    while i < item.node.compound.num_fields {
      def.fields[i].name = item.node.compound.fields[i].ident.name;
      def.fields[i].ty = ast_type_to_ty(ctx, item.node.compound.fields[i].ast_ty);
      i = i + 1;
    }
    def.num_fields = item.node.compound.num_fields;
  }

}

collect_item :: (ctx: *TypeContext, item: *Item) {
  if item.kind == ItemKind::Enum  collect_enum(ctx, item);
  else if item.kind == ItemKind::Function  collect_function(ctx, item);
  else if item.kind == ItemKind::Variable || item.kind == ItemKind::Const  collect_variable(ctx, item);
  else if item.kind == ItemKind::Struct || item.kind == ItemKind::Union  collect_compound(ctx, item);
}

collect_mod :: (ctx: *TypeContext, module: *Module) {
  i: u32 = 0;
  while i < module.num_items {
    collect_item(ctx, &module.items[i]);
    i = i + 1;
  }
}

collect_names :: (ctx: *TypeContext, module: *Module) {
  i: u32 = 0;
  while i < module.num_items {
    item: *Item = &module.items[i];
    if item.kind == ItemKind::Struct || item.kind == ItemKind::Union {
      def: CompoundDef;
      def.path.num_segments = module.path.num_segments + 1;
      def.path.segments = malloc(sizeof(Ident) * def.path.num_segments);
      def.path.binding.kind = BindingKind::Item;
      def.path.binding.node.item = item;
      memcpy(def.path.segments, module.path.segments, sizeof(Ident) * module.path.num_segments);
      def.path.segments[module.path.num_segments] = item.ident;

      ty: Ty;
      if item.kind == ItemKind::Struct  ty.kind = TyKind::Struct;
      else if item.kind == ItemKind::Union  ty.kind = TyKind::Union;

      ty.node.compound = def;

      item.node.compound.ty = intern_ty(ctx, ty);
    }
    else if item.kind == ItemKind::Enum {

      def: EnumDef;
      def.path.num_segments = module.path.num_segments + 1;
      def.path.segments = malloc(sizeof(Ident) * def.path.num_segments);
      def.path.binding.kind = BindingKind::Item;
      def.path.binding.node.item = item;
      memcpy(def.path.segments, module.path.segments, sizeof(Ident) * module.path.num_segments);
      def.path.segments[module.path.num_segments] = item.ident;

      ty: Ty;
      ty.kind = TyKind::Enum;

      ty.node._enum = def;

      item.node._enum.ty = intern_ty(ctx, ty);
    }
    i = i + 1;
  }
}

ctx: TypeContext;

check :: (sess: *Session, module: *Module) {

  if !ctx.initialized {
    ctx.interner = &sess.interner;
    ctx.source_map = &sess.source;
    ctx.types_lookup = intmap_create(1024);
    ctx.types = malloc(sizeof(Ty) * 1024);
    ctx.next_type_idx = 1;
    create_common_types(&ctx);
    ctx.initialized = true;
  }

  collect_names(&ctx, module);
  collect_mod(&ctx, module);
  check_mod(&ctx, module);
}
