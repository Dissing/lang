
use super::cstd::*;

IntMap :: struct {
  keys: *u64,
  values: *u64,
  size: u64,
  load: u64,
}

intmap_create :: (size: u64) -> *IntMap {
  var map: *IntMap = malloc(sizeof(IntMap));

  map.size = size;
  map.load = 0;
  map.keys = malloc(size*8);
  map.values = malloc(size*8);

  var i: u32 = 0;
  while i < size {
    map.keys[i] = 0;
    map.values[i] = 0;
    i = i + 1;
  }

  return map;
}

intmap_hash :: (k: u64) -> u64 {
  if k != 0  return k;
  else return 1;
}

intmap_reset :: (map: *IntMap) {
  map.load = 0;
  memset(map.keys, 0, sizeof(map.size) * 8);
  memset(map.values, 0, sizeof(map.size) * 8);
}

intmap_insert :: (map: *IntMap, key: u64, value: u64) {
  val h: u64 = intmap_hash(key) % map.size;
  if map.load + 1 >= map.size {
    printf("Hashmap of size %lu is full!\n", map.size);
    exit(-1);
  }
  while true {
    if map.keys[h] == key {
      map.values[h] = value;
      break;
    } else if map.keys[h] == 0 {
      map.keys[h] = key;
      map.values[h] = value;
      map.load = map.load + 1;
      break;
    } else {
      h = (h + 1) % map.size;
    }
  }
}

intmap_lookup :: (map: *IntMap, key: u64) -> u64 {
  var h: u64 = intmap_hash(key) % map.size;
  while (true) {
    if map.keys[h] == 0  return 0;
    if map.keys[h] == key {
      return map.values[h];
    }
    h = (h + 1) % map.size;
  }
}

intmap_destroy :: (map: *IntMap) {
  free(map.keys);
  free(map.values);
  free(map);
}
